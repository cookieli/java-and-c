package com.lizhengxian.linked;



public class LinkedDemo<T> {
	 
      int size;
	  Node<T> first;
      Node<T> last;
      public void addFirst(T item){
    	  final Node<T> f =first;
    	  Node<T> newNode =new Node<T>(item,f);
    	  first=newNode;
    	  if(first==null)
    	  {
    		  last=newNode;
    	  }
    	  else{
    		  
    	  }
    	  size++;
     }
      public void addLast(T item){
    	 final Node<T> l=last;
    	 Node<T> newNode=new Node<T>(item,null);
    //	 last = newNode;
    	 if(last==null)
    	 {
    		 first=newNode;
    	 }else{
    		 l.next=newNode;
    		 size++;
    	 }
    	 //size++;
      }
      public boolean isEmpty(){
    	  if(first==null)
    	  {
    		  return true;
    	  }
    	  return false; 
      }
      public Node<T> findLastBefore()
      {
    	  if(this.isEmpty())
    	{
    	  Node<T> temp =first;
    	  while(temp.next.next!=null)
    	  {
    		  temp=temp.next;
    	  }
    	  return temp;
      }
    	  return null;
     }
      public void deleteLast(){
    	  findLastBefore().next=null;
    	 
      }
      public int size(){
    	 return size;
      }
      public Node<T> find(int k)
      {
    	  Node<T> temp = first;
    	  if(k<this.size())
    	  {
    	  int coord=0;
    	  if(!this.isEmpty())
    	  {
    	   while(temp.next!=null)
    	   {
    		   temp = temp.next;	
    		   if(coord==k)
    		   {
    			   break;
    		   }
    		   coord++;
    	   }
    	  }
    	  return temp;
    	  }
    	  else 
    		  return null;
      }
	  public void delete(int k)
	  {
		  if(k==this.size()-1)
		  deleteLast();
		  else if(k<this.size()-1)
			  if(k==0)
			  {
				  first.next=null;
			  }
	      else
		  find(k-1).next=find(k-1).next.next;
		  else
			   return;
	  }
	  public void removeAfter(Node<T> t){
		  if(t==null)
			  return;
		  if(t.next==null)
			  return;
		  t.next=null;
	  }
	  public void insertAfter(Node<T> a,Node<T> b)
	  {
		  if(a==null||b==null)
			  return;
		  b.next =a.next.next;
		  a.next=b;
	  }
	  public void remove(T key){
		    Node<T> temp=first;
		    int cnt=0;
		    if(temp!=null)
		    {
		    	while(temp.next!=null)
		    	{
		    		if(temp.item==key)
		    		{
		    			delete(cnt);
		    		}
		    		
		    	}
		    }
		    
	  }
	  class Node<T>
	  {
		  T item;
		  Node<T> next;
		  Node(){
			  this.item =null;
			  this.next=null;
		  }
		  
		  Node(T item,Node<T> next)
		  {
			  this.item=item;
			  this.next=next;
		  }
	  }
    
}
